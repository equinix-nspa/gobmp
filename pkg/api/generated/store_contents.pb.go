// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: pkg/api/proto/store_contents.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_proto_store_contents_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_proto_store_contents_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_proto_store_contents_proto_rawDescGZIP(), []int{0}
}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BGP-LS only for now
	BgpLs *GetLSResponse `protobuf:"bytes,1,opt,name=bgp_ls,json=bgpLs,proto3" json:"bgp_ls,omitempty"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_proto_store_contents_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_proto_store_contents_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_proto_store_contents_proto_rawDescGZIP(), []int{1}
}

func (x *GetResponse) GetBgpLs() *GetLSResponse {
	if x != nil {
		return x.BgpLs
	}
	return nil
}

type GetLSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*LSNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Links []*LSLink `protobuf:"bytes,2,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *GetLSResponse) Reset() {
	*x = GetLSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_proto_store_contents_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLSResponse) ProtoMessage() {}

func (x *GetLSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_proto_store_contents_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLSResponse.ProtoReflect.Descriptor instead.
func (*GetLSResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_proto_store_contents_proto_rawDescGZIP(), []int{2}
}

func (x *GetLSResponse) GetNodes() []*LSNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *GetLSResponse) GetLinks() []*LSLink {
	if x != nil {
		return x.Links
	}
	return nil
}

// Multi-topology and SR not in there for the moment (not needed right now)
type LSNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key                string           `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Id                 string           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Rev                string           `protobuf:"bytes,3,opt,name=rev,proto3" json:"rev,omitempty"`
	Sequence           int32            `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Hash               string           `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	RouterHash         string           `protobuf:"bytes,6,opt,name=router_hash,json=routerHash,proto3" json:"router_hash,omitempty"`
	DomainId           int64            `protobuf:"varint,7,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	RouterIp           string           `protobuf:"bytes,8,opt,name=router_ip,json=routerIp,proto3" json:"router_ip,omitempty"`
	PeerHash           string           `protobuf:"bytes,9,opt,name=peer_hash,json=peerHash,proto3" json:"peer_hash,omitempty"`
	PeerIp             string           `protobuf:"bytes,10,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	PeerType           uint32           `protobuf:"varint,11,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerAsn            uint32           `protobuf:"varint,12,opt,name=peer_asn,json=peerAsn,proto3" json:"peer_asn,omitempty"`
	Timestamp          string           `protobuf:"bytes,13,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	IgpRouterId        string           `protobuf:"bytes,14,opt,name=igp_router_id,json=igpRouterId,proto3" json:"igp_router_id,omitempty"`
	RouterId           string           `protobuf:"bytes,15,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	Asn                uint32           `protobuf:"varint,16,opt,name=asn,proto3" json:"asn,omitempty"`
	Lsid               uint32           `protobuf:"varint,17,opt,name=lsid,proto3" json:"lsid,omitempty"`
	AreaId             string           `protobuf:"bytes,18,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	Protocol           string           `protobuf:"bytes,19,opt,name=protocol,proto3" json:"protocol,omitempty"`
	ProtocolId         uint32           `protobuf:"varint,20,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
	NodeFlags          *LSNodeAttrFlags `protobuf:"bytes,21,opt,name=node_flags,json=nodeFlags,proto3" json:"node_flags,omitempty"`
	Name               string           `protobuf:"bytes,22,opt,name=name,proto3" json:"name,omitempty"`
	IsAdjRibInPost     bool             `protobuf:"varint,23,opt,name=is_adj_rib_in_post,json=isAdjRibInPost,proto3" json:"is_adj_rib_in_post,omitempty"`
	IsAdjRibOutPost    bool             `protobuf:"varint,24,opt,name=is_adj_rib_out_post,json=isAdjRibOutPost,proto3" json:"is_adj_rib_out_post,omitempty"`
	IsLocalRibFiltered bool             `protobuf:"varint,25,opt,name=is_local_rib_filtered,json=isLocalRibFiltered,proto3" json:"is_local_rib_filtered,omitempty"`
}

func (x *LSNode) Reset() {
	*x = LSNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_proto_store_contents_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LSNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LSNode) ProtoMessage() {}

func (x *LSNode) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_proto_store_contents_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LSNode.ProtoReflect.Descriptor instead.
func (*LSNode) Descriptor() ([]byte, []int) {
	return file_pkg_api_proto_store_contents_proto_rawDescGZIP(), []int{3}
}

func (x *LSNode) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LSNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LSNode) GetRev() string {
	if x != nil {
		return x.Rev
	}
	return ""
}

func (x *LSNode) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *LSNode) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *LSNode) GetRouterHash() string {
	if x != nil {
		return x.RouterHash
	}
	return ""
}

func (x *LSNode) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *LSNode) GetRouterIp() string {
	if x != nil {
		return x.RouterIp
	}
	return ""
}

func (x *LSNode) GetPeerHash() string {
	if x != nil {
		return x.PeerHash
	}
	return ""
}

func (x *LSNode) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *LSNode) GetPeerType() uint32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *LSNode) GetPeerAsn() uint32 {
	if x != nil {
		return x.PeerAsn
	}
	return 0
}

func (x *LSNode) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *LSNode) GetIgpRouterId() string {
	if x != nil {
		return x.IgpRouterId
	}
	return ""
}

func (x *LSNode) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *LSNode) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *LSNode) GetLsid() uint32 {
	if x != nil {
		return x.Lsid
	}
	return 0
}

func (x *LSNode) GetAreaId() string {
	if x != nil {
		return x.AreaId
	}
	return ""
}

func (x *LSNode) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *LSNode) GetProtocolId() uint32 {
	if x != nil {
		return x.ProtocolId
	}
	return 0
}

func (x *LSNode) GetNodeFlags() *LSNodeAttrFlags {
	if x != nil {
		return x.NodeFlags
	}
	return nil
}

func (x *LSNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LSNode) GetIsAdjRibInPost() bool {
	if x != nil {
		return x.IsAdjRibInPost
	}
	return false
}

func (x *LSNode) GetIsAdjRibOutPost() bool {
	if x != nil {
		return x.IsAdjRibOutPost
	}
	return false
}

func (x *LSNode) GetIsLocalRibFiltered() bool {
	if x != nil {
		return x.IsLocalRibFiltered
	}
	return false
}

type LSNodeAttrFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OFlag bool `protobuf:"varint,1,opt,name=o_flag,json=oFlag,proto3" json:"o_flag,omitempty"`
	TFlag bool `protobuf:"varint,2,opt,name=t_flag,json=tFlag,proto3" json:"t_flag,omitempty"`
	EFlag bool `protobuf:"varint,3,opt,name=e_flag,json=eFlag,proto3" json:"e_flag,omitempty"`
	BFlag bool `protobuf:"varint,4,opt,name=b_flag,json=bFlag,proto3" json:"b_flag,omitempty"`
	RFlag bool `protobuf:"varint,5,opt,name=r_flag,json=rFlag,proto3" json:"r_flag,omitempty"`
	FFlag bool `protobuf:"varint,6,opt,name=f_flag,json=fFlag,proto3" json:"f_flag,omitempty"`
}

func (x *LSNodeAttrFlags) Reset() {
	*x = LSNodeAttrFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_proto_store_contents_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LSNodeAttrFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LSNodeAttrFlags) ProtoMessage() {}

func (x *LSNodeAttrFlags) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_proto_store_contents_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LSNodeAttrFlags.ProtoReflect.Descriptor instead.
func (*LSNodeAttrFlags) Descriptor() ([]byte, []int) {
	return file_pkg_api_proto_store_contents_proto_rawDescGZIP(), []int{4}
}

func (x *LSNodeAttrFlags) GetOFlag() bool {
	if x != nil {
		return x.OFlag
	}
	return false
}

func (x *LSNodeAttrFlags) GetTFlag() bool {
	if x != nil {
		return x.TFlag
	}
	return false
}

func (x *LSNodeAttrFlags) GetEFlag() bool {
	if x != nil {
		return x.EFlag
	}
	return false
}

func (x *LSNodeAttrFlags) GetBFlag() bool {
	if x != nil {
		return x.BFlag
	}
	return false
}

func (x *LSNodeAttrFlags) GetRFlag() bool {
	if x != nil {
		return x.RFlag
	}
	return false
}

func (x *LSNodeAttrFlags) GetFFlag() bool {
	if x != nil {
		return x.FFlag
	}
	return false
}

type LSLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key                      string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Id                       string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Rev                      string   `protobuf:"bytes,3,opt,name=rev,proto3" json:"rev,omitempty"`
	Sequence                 int32    `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Hash                     string   `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	RouterHash               string   `protobuf:"bytes,6,opt,name=router_hash,json=routerHash,proto3" json:"router_hash,omitempty"`
	DomainId                 int64    `protobuf:"varint,7,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	RouterIp                 string   `protobuf:"bytes,8,opt,name=router_ip,json=routerIp,proto3" json:"router_ip,omitempty"`
	PeerHash                 string   `protobuf:"bytes,9,opt,name=peer_hash,json=peerHash,proto3" json:"peer_hash,omitempty"`
	PeerIp                   string   `protobuf:"bytes,10,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	PeerType                 uint32   `protobuf:"varint,11,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerAsn                  uint32   `protobuf:"varint,12,opt,name=peer_asn,json=peerAsn,proto3" json:"peer_asn,omitempty"`
	Timestamp                string   `protobuf:"bytes,13,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	IgpRouterId              string   `protobuf:"bytes,14,opt,name=igp_router_id,json=igpRouterId,proto3" json:"igp_router_id,omitempty"`
	RouterId                 string   `protobuf:"bytes,15,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	Lsid                     uint32   `protobuf:"varint,16,opt,name=lsid,proto3" json:"lsid,omitempty"`
	AreaId                   string   `protobuf:"bytes,17,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	Protocol                 string   `protobuf:"bytes,18,opt,name=protocol,proto3" json:"protocol,omitempty"`
	ProtocolId               uint32   `protobuf:"varint,19,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
	NextHop                  string   `protobuf:"bytes,20,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	LocalLinkId              uint32   `protobuf:"varint,21,opt,name=local_link_id,json=localLinkId,proto3" json:"local_link_id,omitempty"`
	RemoteLinkId             uint32   `protobuf:"varint,22,opt,name=remote_link_id,json=remoteLinkId,proto3" json:"remote_link_id,omitempty"`
	LocalLinkIp              string   `protobuf:"bytes,23,opt,name=local_link_ip,json=localLinkIp,proto3" json:"local_link_ip,omitempty"`
	RemoteLinkIp             string   `protobuf:"bytes,24,opt,name=remote_link_ip,json=remoteLinkIp,proto3" json:"remote_link_ip,omitempty"`
	IgpMetric                uint32   `protobuf:"varint,25,opt,name=igp_metric,json=igpMetric,proto3" json:"igp_metric,omitempty"`
	AdminGrpup               uint32   `protobuf:"varint,26,opt,name=admin_grpup,json=adminGrpup,proto3" json:"admin_grpup,omitempty"`
	MaxLinkBw                uint32   `protobuf:"varint,27,opt,name=max_link_bw,json=maxLinkBw,proto3" json:"max_link_bw,omitempty"`
	MaxResvBw                uint32   `protobuf:"varint,28,opt,name=max_resv_bw,json=maxResvBw,proto3" json:"max_resv_bw,omitempty"`
	TeDefaultMetric          uint32   `protobuf:"varint,29,opt,name=te_default_metric,json=teDefaultMetric,proto3" json:"te_default_metric,omitempty"`
	LinkProtection           uint32   `protobuf:"varint,30,opt,name=link_protection,json=linkProtection,proto3" json:"link_protection,omitempty"`
	MplsProtoMask            uint32   `protobuf:"varint,31,opt,name=mpls_proto_mask,json=mplsProtoMask,proto3" json:"mpls_proto_mask,omitempty"`
	LinkName                 string   `protobuf:"bytes,32,opt,name=link_name,json=linkName,proto3" json:"link_name,omitempty"`
	RemoteNodeHash           string   `protobuf:"bytes,33,opt,name=remote_node_hash,json=remoteNodeHash,proto3" json:"remote_node_hash,omitempty"`
	LocalNodeHash            string   `protobuf:"bytes,34,opt,name=local_node_hash,json=localNodeHash,proto3" json:"local_node_hash,omitempty"`
	RemoteIgpRouterId        string   `protobuf:"bytes,35,opt,name=remote_igp_router_id,json=remoteIgpRouterId,proto3" json:"remote_igp_router_id,omitempty"`
	RemoteRouterId           string   `protobuf:"bytes,36,opt,name=remote_router_id,json=remoteRouterId,proto3" json:"remote_router_id,omitempty"`
	LocalNodeAsn             uint32   `protobuf:"varint,37,opt,name=local_node_asn,json=localNodeAsn,proto3" json:"local_node_asn,omitempty"`
	RemoteNodeAsn            uint32   `protobuf:"varint,38,opt,name=remote_node_asn,json=remoteNodeAsn,proto3" json:"remote_node_asn,omitempty"`
	BgpRouterId              string   `protobuf:"bytes,39,opt,name=bgp_router_id,json=bgpRouterId,proto3" json:"bgp_router_id,omitempty"`
	BgpRemoteRouterId        string   `protobuf:"bytes,40,opt,name=bgp_remote_router_id,json=bgpRemoteRouterId,proto3" json:"bgp_remote_router_id,omitempty"`
	MemberAs                 uint32   `protobuf:"varint,41,opt,name=member_as,json=memberAs,proto3" json:"member_as,omitempty"`
	UnidirLinkDelay          uint32   `protobuf:"varint,42,opt,name=unidir_link_delay,json=unidirLinkDelay,proto3" json:"unidir_link_delay,omitempty"`
	UnidirLinkDelayMinMax    []uint32 `protobuf:"varint,43,rep,packed,name=unidir_link_delay_min_max,json=unidirLinkDelayMinMax,proto3" json:"unidir_link_delay_min_max,omitempty"`
	UnidirLinkDelayVariation uint32   `protobuf:"varint,44,opt,name=unidir_link_delay_variation,json=unidirLinkDelayVariation,proto3" json:"unidir_link_delay_variation,omitempty"`
	UnidirPacketLoss         uint32   `protobuf:"varint,45,opt,name=unidir_packet_loss,json=unidirPacketLoss,proto3" json:"unidir_packet_loss,omitempty"`
	UnidirResidualBw         uint32   `protobuf:"varint,46,opt,name=unidir_residual_bw,json=unidirResidualBw,proto3" json:"unidir_residual_bw,omitempty"`
	UnidirAvailableBw        uint32   `protobuf:"varint,47,opt,name=unidir_available_bw,json=unidirAvailableBw,proto3" json:"unidir_available_bw,omitempty"`
	UnidirBwUtilization      uint32   `protobuf:"varint,48,opt,name=unidir_bw_utilization,json=unidirBwUtilization,proto3" json:"unidir_bw_utilization,omitempty"`
	IsAdjRibInPost           bool     `protobuf:"varint,49,opt,name=is_adj_rib_in_post,json=isAdjRibInPost,proto3" json:"is_adj_rib_in_post,omitempty"`
	IsAdjRibOutPost          bool     `protobuf:"varint,50,opt,name=is_adj_rib_out_post,json=isAdjRibOutPost,proto3" json:"is_adj_rib_out_post,omitempty"`
	IsLocalRibFiltered       bool     `protobuf:"varint,51,opt,name=is_local_rib_filtered,json=isLocalRibFiltered,proto3" json:"is_local_rib_filtered,omitempty"`
}

func (x *LSLink) Reset() {
	*x = LSLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_proto_store_contents_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LSLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LSLink) ProtoMessage() {}

func (x *LSLink) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_proto_store_contents_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LSLink.ProtoReflect.Descriptor instead.
func (*LSLink) Descriptor() ([]byte, []int) {
	return file_pkg_api_proto_store_contents_proto_rawDescGZIP(), []int{5}
}

func (x *LSLink) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LSLink) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LSLink) GetRev() string {
	if x != nil {
		return x.Rev
	}
	return ""
}

func (x *LSLink) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *LSLink) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *LSLink) GetRouterHash() string {
	if x != nil {
		return x.RouterHash
	}
	return ""
}

func (x *LSLink) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *LSLink) GetRouterIp() string {
	if x != nil {
		return x.RouterIp
	}
	return ""
}

func (x *LSLink) GetPeerHash() string {
	if x != nil {
		return x.PeerHash
	}
	return ""
}

func (x *LSLink) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *LSLink) GetPeerType() uint32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *LSLink) GetPeerAsn() uint32 {
	if x != nil {
		return x.PeerAsn
	}
	return 0
}

func (x *LSLink) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *LSLink) GetIgpRouterId() string {
	if x != nil {
		return x.IgpRouterId
	}
	return ""
}

func (x *LSLink) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *LSLink) GetLsid() uint32 {
	if x != nil {
		return x.Lsid
	}
	return 0
}

func (x *LSLink) GetAreaId() string {
	if x != nil {
		return x.AreaId
	}
	return ""
}

func (x *LSLink) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *LSLink) GetProtocolId() uint32 {
	if x != nil {
		return x.ProtocolId
	}
	return 0
}

func (x *LSLink) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

func (x *LSLink) GetLocalLinkId() uint32 {
	if x != nil {
		return x.LocalLinkId
	}
	return 0
}

func (x *LSLink) GetRemoteLinkId() uint32 {
	if x != nil {
		return x.RemoteLinkId
	}
	return 0
}

func (x *LSLink) GetLocalLinkIp() string {
	if x != nil {
		return x.LocalLinkIp
	}
	return ""
}

func (x *LSLink) GetRemoteLinkIp() string {
	if x != nil {
		return x.RemoteLinkIp
	}
	return ""
}

func (x *LSLink) GetIgpMetric() uint32 {
	if x != nil {
		return x.IgpMetric
	}
	return 0
}

func (x *LSLink) GetAdminGrpup() uint32 {
	if x != nil {
		return x.AdminGrpup
	}
	return 0
}

func (x *LSLink) GetMaxLinkBw() uint32 {
	if x != nil {
		return x.MaxLinkBw
	}
	return 0
}

func (x *LSLink) GetMaxResvBw() uint32 {
	if x != nil {
		return x.MaxResvBw
	}
	return 0
}

func (x *LSLink) GetTeDefaultMetric() uint32 {
	if x != nil {
		return x.TeDefaultMetric
	}
	return 0
}

func (x *LSLink) GetLinkProtection() uint32 {
	if x != nil {
		return x.LinkProtection
	}
	return 0
}

func (x *LSLink) GetMplsProtoMask() uint32 {
	if x != nil {
		return x.MplsProtoMask
	}
	return 0
}

func (x *LSLink) GetLinkName() string {
	if x != nil {
		return x.LinkName
	}
	return ""
}

func (x *LSLink) GetRemoteNodeHash() string {
	if x != nil {
		return x.RemoteNodeHash
	}
	return ""
}

func (x *LSLink) GetLocalNodeHash() string {
	if x != nil {
		return x.LocalNodeHash
	}
	return ""
}

func (x *LSLink) GetRemoteIgpRouterId() string {
	if x != nil {
		return x.RemoteIgpRouterId
	}
	return ""
}

func (x *LSLink) GetRemoteRouterId() string {
	if x != nil {
		return x.RemoteRouterId
	}
	return ""
}

func (x *LSLink) GetLocalNodeAsn() uint32 {
	if x != nil {
		return x.LocalNodeAsn
	}
	return 0
}

func (x *LSLink) GetRemoteNodeAsn() uint32 {
	if x != nil {
		return x.RemoteNodeAsn
	}
	return 0
}

func (x *LSLink) GetBgpRouterId() string {
	if x != nil {
		return x.BgpRouterId
	}
	return ""
}

func (x *LSLink) GetBgpRemoteRouterId() string {
	if x != nil {
		return x.BgpRemoteRouterId
	}
	return ""
}

func (x *LSLink) GetMemberAs() uint32 {
	if x != nil {
		return x.MemberAs
	}
	return 0
}

func (x *LSLink) GetUnidirLinkDelay() uint32 {
	if x != nil {
		return x.UnidirLinkDelay
	}
	return 0
}

func (x *LSLink) GetUnidirLinkDelayMinMax() []uint32 {
	if x != nil {
		return x.UnidirLinkDelayMinMax
	}
	return nil
}

func (x *LSLink) GetUnidirLinkDelayVariation() uint32 {
	if x != nil {
		return x.UnidirLinkDelayVariation
	}
	return 0
}

func (x *LSLink) GetUnidirPacketLoss() uint32 {
	if x != nil {
		return x.UnidirPacketLoss
	}
	return 0
}

func (x *LSLink) GetUnidirResidualBw() uint32 {
	if x != nil {
		return x.UnidirResidualBw
	}
	return 0
}

func (x *LSLink) GetUnidirAvailableBw() uint32 {
	if x != nil {
		return x.UnidirAvailableBw
	}
	return 0
}

func (x *LSLink) GetUnidirBwUtilization() uint32 {
	if x != nil {
		return x.UnidirBwUtilization
	}
	return 0
}

func (x *LSLink) GetIsAdjRibInPost() bool {
	if x != nil {
		return x.IsAdjRibInPost
	}
	return false
}

func (x *LSLink) GetIsAdjRibOutPost() bool {
	if x != nil {
		return x.IsAdjRibOutPost
	}
	return false
}

func (x *LSLink) GetIsLocalRibFiltered() bool {
	if x != nil {
		return x.IsLocalRibFiltered
	}
	return false
}

var File_pkg_api_proto_store_contents_proto protoreflect.FileDescriptor

var file_pkg_api_proto_store_contents_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x67, 0x6f, 0x62, 0x6d, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x22,
	0x0c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3e, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06,
	0x62, 0x67, 0x70, 0x5f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x6f, 0x62, 0x6d, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x53, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x62, 0x67, 0x70, 0x4c, 0x73, 0x22, 0x61, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x4c, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x67, 0x6f, 0x62, 0x6d, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x53, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x62, 0x6d, 0x70, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x53, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x22, 0xec, 0x05, 0x0a, 0x06, 0x4c, 0x53, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x76, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x65, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x70, 0x65, 0x65, 0x72, 0x41, 0x73, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x67, 0x70, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x73, 0x69,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x73, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x62, 0x6d, 0x70, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x53, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62,
	0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x13, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x41,
	0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x15,
	0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x52, 0x69, 0x62, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x22,
	0x9b, 0x01, 0x0a, 0x0f, 0x4c, 0x53, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x15, 0x0a, 0x06, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xa6, 0x0e,
	0x0a, 0x06, 0x4c, 0x53, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x76, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x65,
	0x65, 0x72, 0x41, 0x73, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x67, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x67, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x73, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x6c, 0x73, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x69, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x67, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x69, 0x67, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x70, 0x75, 0x70, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x70, 0x75, 0x70, 0x12, 0x1e, 0x0a,
	0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x62, 0x77, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x77, 0x12, 0x1e, 0x0a,
	0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x76, 0x5f, 0x62, 0x77, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x76, 0x42, 0x77, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x70, 0x6c,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x69, 0x67, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49,
	0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x73, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x73, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x67, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x67, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x62, 0x67, 0x70, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x67, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x61, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x6e, 0x69, 0x64, 0x69, 0x72, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x75, 0x6e, 0x69, 0x64, 0x69, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x38, 0x0a, 0x19, 0x75, 0x6e, 0x69, 0x64, 0x69, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x2b, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x15, 0x75, 0x6e, 0x69, 0x64, 0x69, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x3d, 0x0a, 0x1b, 0x75, 0x6e,
	0x69, 0x64, 0x69, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x18, 0x75, 0x6e, 0x69, 0x64, 0x69, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x6e, 0x69,
	0x64, 0x69, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x6e, 0x69, 0x64, 0x69, 0x72, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x6e, 0x69, 0x64, 0x69,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x62, 0x77, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x6e, 0x69, 0x64, 0x69, 0x72, 0x52, 0x65, 0x73, 0x69, 0x64,
	0x75, 0x61, 0x6c, 0x42, 0x77, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x6e, 0x69, 0x64, 0x69, 0x72, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x77, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x75, 0x6e, 0x69, 0x64, 0x69, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x77, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x6e, 0x69, 0x64, 0x69, 0x72, 0x5f,
	0x62, 0x77, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x75, 0x6e, 0x69, 0x64, 0x69, 0x72, 0x42, 0x77, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x12, 0x69, 0x73, 0x5f,
	0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49,
	0x6e, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6a, 0x5f,
	0x72, 0x69, 0x62, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50,
	0x6f, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x72, 0x69, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x69, 0x62, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x32, 0x4c, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x34,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x67, 0x6f, 0x62, 0x6d, 0x70, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x62, 0x6d, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x13, 0x5a, 0x11, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_pkg_api_proto_store_contents_proto_rawDescOnce sync.Once
	file_pkg_api_proto_store_contents_proto_rawDescData = file_pkg_api_proto_store_contents_proto_rawDesc
)

func file_pkg_api_proto_store_contents_proto_rawDescGZIP() []byte {
	file_pkg_api_proto_store_contents_proto_rawDescOnce.Do(func() {
		file_pkg_api_proto_store_contents_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_api_proto_store_contents_proto_rawDescData)
	})
	return file_pkg_api_proto_store_contents_proto_rawDescData
}

var file_pkg_api_proto_store_contents_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_pkg_api_proto_store_contents_proto_goTypes = []any{
	(*GetRequest)(nil),      // 0: gobmp.api.GetRequest
	(*GetResponse)(nil),     // 1: gobmp.api.GetResponse
	(*GetLSResponse)(nil),   // 2: gobmp.api.GetLSResponse
	(*LSNode)(nil),          // 3: gobmp.api.LSNode
	(*LSNodeAttrFlags)(nil), // 4: gobmp.api.LSNodeAttrFlags
	(*LSLink)(nil),          // 5: gobmp.api.LSLink
}
var file_pkg_api_proto_store_contents_proto_depIdxs = []int32{
	2, // 0: gobmp.api.GetResponse.bgp_ls:type_name -> gobmp.api.GetLSResponse
	3, // 1: gobmp.api.GetLSResponse.nodes:type_name -> gobmp.api.LSNode
	5, // 2: gobmp.api.GetLSResponse.links:type_name -> gobmp.api.LSLink
	4, // 3: gobmp.api.LSNode.node_flags:type_name -> gobmp.api.LSNodeAttrFlags
	0, // 4: gobmp.api.StoreContentsService.Get:input_type -> gobmp.api.GetRequest
	1, // 5: gobmp.api.StoreContentsService.Get:output_type -> gobmp.api.GetResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_pkg_api_proto_store_contents_proto_init() }
func file_pkg_api_proto_store_contents_proto_init() {
	if File_pkg_api_proto_store_contents_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_api_proto_store_contents_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_proto_store_contents_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_proto_store_contents_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetLSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_proto_store_contents_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*LSNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_proto_store_contents_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*LSNodeAttrFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_proto_store_contents_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*LSLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_api_proto_store_contents_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_api_proto_store_contents_proto_goTypes,
		DependencyIndexes: file_pkg_api_proto_store_contents_proto_depIdxs,
		MessageInfos:      file_pkg_api_proto_store_contents_proto_msgTypes,
	}.Build()
	File_pkg_api_proto_store_contents_proto = out.File
	file_pkg_api_proto_store_contents_proto_rawDesc = nil
	file_pkg_api_proto_store_contents_proto_goTypes = nil
	file_pkg_api_proto_store_contents_proto_depIdxs = nil
}
